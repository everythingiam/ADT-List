package linkedListList1;
public class List {
    private Object obj; //массив
    private Position last; //последний занятый

    //создание массива объектов
    public List( obj){
        this.obj = obj;
        последний = -1;
    }

    public Position next(Position p(5), неявно список){
        вернуть p+1 с проверкой того, не выходит ли позиция за пределы массива;
        и добавить проверку есои элемент последний
        return p+1;
    }

    public Position end(L){
        возвращает last + 1 (по идее null);
    }
    
    public Position first(L){
        если массив не пустой, то возвращаем позицию 0
    }

    public Position previous(int p){
        вернуть p-1 с проверкой того, не выходит ли позиция за пределы массивa;
        и еще добавить проверку если элемент первый
    }

    public retrive(int p, L){
        возвращаем объект в позиции р. (return obj[p])
        Если позиции р в списке нет или р = Енд(Л), 
        то результат неопределен(исключение)
    }

    public void insert(int p, L, T x){
        если позиции в списке нет (позиция больше чем ласт), то ничего не
        делаем (return);
        в цикле начинаем отсчёт с последнего элемента до того момента, пока 
        i не достигнет номера позиции. в этом цикле собственно делаем
        obj[i]] = obj[i-1];
        после цикла найденная позиция становится объектом x;
        а последний увеличивается на 1
    }

    public void makeNull(L) {
        циклом обнуляем каждый элемент через уикл
        и ласт делаем -1
    }

    public void delete(int p, L){
        
    }

    public Position locate(неявный параметр, Position p){
        просто через цикл находим
    }

    [1, 5, 6, 8, 10, 13] 
}
